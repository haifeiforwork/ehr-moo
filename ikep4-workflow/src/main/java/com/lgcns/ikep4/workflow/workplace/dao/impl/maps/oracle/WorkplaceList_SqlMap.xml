<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >

<sqlMap namespace="workflow.workplace.dao.WorkplaceList" >
	<typeAlias alias="ProcessBean" type="com.lgcns.ikep4.workflow.engine.model.ProcessBean"/>
	<typeAlias alias="WorkItemBean" type="com.lgcns.ikep4.workflow.engine.model.WorkItemBean"/>
	<typeAlias alias="workplaceItemSearchCondition" type="com.lgcns.ikep4.workflow.workplace.search.WorkplaceSearchCondition"/>
	
	<sql id="whereList">
		<isEqual property="queryId" compareValue="startProcList">
		/* 업무시작 조건절 */
			<isNotNull property="partition"><isNotEmpty property="partition" prepend="AND">
				PARTI.PARTITION_ID = #partition#
	        </isNotEmpty></isNotNull>
			<isNotNull property="searchkeyword"><isNotEmpty property="searchkeyword">
				<isEqual prepend="AND" property="searchcondition" compareValue="PROCESS">
		            PROC.PROCESS_NAME LIKE '%' || #searchkeyword# || '%'
		        </isEqual>
		        <isEqual prepend="AND" property="searchcondition" compareValue="ACTIVITY">
		            ACT2.ACTIVITY_NAME LIKE '%' || #searchkeyword# || '%'
		        </isEqual>
	        </isNotEmpty></isNotNull>
		</isEqual>
		
		<isEqual property="queryId" compareValue="todoList" prepend="WHERE 1=1 ">
		/* 나의 업무목록 조건절 */
			<isNotNull property="partition"><isNotEmpty property="partition" prepend="AND">
				partitionId = #partition#
	        </isNotEmpty></isNotNull>
			<isNotNull property="startPeriod"><isNotEmpty property="startPeriod" prepend="AND">
				createDate 	>= TO_DATE(REPLACE(#startPeriod#,'.','')||'000000', 'YYYYMMDDHH24MISS')
	        </isNotEmpty></isNotNull>
			<isNotNull property="endPeriod"><isNotEmpty property="endPeriod" prepend="AND">
				TO_DATE(REPLACE(#endPeriod#,'.','')||'235959', 'YYYYMMDDHH24MISS') >= createDate
	        </isNotEmpty></isNotNull>
			<isNotNull property="searchkeyword"><isNotEmpty property="searchkeyword">
				<isEqual prepend="AND" property="searchcondition" compareValue="PROCESS">
		            processName LIKE '%' || #searchkeyword# || '%'
		        </isEqual>
		        <isEqual prepend="AND" property="searchcondition" compareValue="ACTIVITY">
		            activityName LIKE '%' || #searchkeyword# || '%'
		        </isEqual>
		        <isEqual prepend="AND" property="searchcondition" compareValue="TITLE">
		            title LIKE '%' || #searchkeyword# || '%'
		        </isEqual>
	        </isNotEmpty></isNotNull>
			<isNotNull property="requestorId"><isNotEmpty property="requestorId" prepend="AND">
		            performerId = #requestorId#
	    	</isNotEmpty></isNotNull>
			<isNotNull property="apprDocState"><isNotEmpty property="apprDocState" prepend="AND">
		            state = #apprDocState#
	    	</isNotEmpty></isNotNull>
		</isEqual>
		
		<isEqual property="queryId" compareValue="runningList">
		/* 진행중인 업무목록 조건절 */
			<isNotNull property="partition"><isNotEmpty property="partition" prepend="AND">
				PARTI.PARTITION_ID = #partition#
	        </isNotEmpty></isNotNull>
	        <isNotNull property="startPeriod"><isNotEmpty property="startPeriod" prepend="AND">
				INS.CREATE_DATE 	>= TO_DATE(REPLACE(#startPeriod#,'.','')||'000000', 'YYYYMMDDHH24MISS')
	        </isNotEmpty></isNotNull>
			<isNotNull property="endPeriod"><isNotEmpty property="endPeriod" prepend="AND">
				TO_DATE(REPLACE(#endPeriod#,'.','')||'235959', 'YYYYMMDDHH24MISS') >= INS.CREATE_DATE
	        </isNotEmpty></isNotNull>
			<isNotNull property="searchkeyword"><isNotEmpty property="searchkeyword">
				<isEqual prepend="AND" property="searchcondition" compareValue="PROCESS">
		            PROC.PROCESS_NAME LIKE '%' || #searchkeyword# || '%'
		        </isEqual>
		        <isEqual prepend="AND" property="searchcondition" compareValue="ACTIVITY">
		            TODO.ACTIVITY_NAME LIKE '%' || #searchkeyword# || '%'
		        </isEqual>
		        <isEqual prepend="AND" property="searchcondition" compareValue="TITLE">
		            INS.TITLE LIKE '%' || #searchkeyword# || '%'
		        </isEqual>
	        </isNotEmpty></isNotNull>
			<isNotNull property="apprDocState"><isNotEmpty property="apprDocState">
		            AND INS.STATE = #apprDocState#
	    	</isNotEmpty></isNotNull>
		</isEqual>
		
		<isEqual property="queryId" compareValue="errorList">
		/* 에러 업무목록 조건절 */
			<isNotNull property="partition"><isNotEmpty property="partition" prepend="AND">
				PARTI.PARTITION_ID = #partition#
	        </isNotEmpty></isNotNull>
	        <isNotNull property="startPeriod"><isNotEmpty property="startPeriod" prepend="AND">
				INS.CREATE_DATE 	>= TO_DATE(REPLACE(#startPeriod#,'.','')||'000000', 'YYYYMMDDHH24MISS')
	        </isNotEmpty></isNotNull>
			<isNotNull property="endPeriod"><isNotEmpty property="endPeriod" prepend="AND">
				TO_DATE(REPLACE(#endPeriod#,'.','')||'235959', 'YYYYMMDDHH24MISS') >= INS.CREATE_DATE
	        </isNotEmpty></isNotNull>
			<isNotNull property="searchkeyword"><isNotEmpty property="searchkeyword">
				<isEqual prepend="AND" property="searchcondition" compareValue="PROCESS">
		            PROC.PROCESS_NAME LIKE '%' || #searchkeyword# || '%'
		        </isEqual>
		        <isEqual prepend="AND" property="searchcondition" compareValue="ACTIVITY">
		            TODO.ACTIVITY_NAME LIKE '%' || #searchkeyword# || '%'
		        </isEqual>
		        <isEqual prepend="AND" property="searchcondition" compareValue="TITLE">
		            INS.TITLE LIKE '%' || #searchkeyword# || '%'
		        </isEqual>
	        </isNotEmpty></isNotNull>
			<isNotNull property="apprDocState"><isNotEmpty property="apprDocState">
		            AND INS.STATE = #apprDocState#
	    	</isNotEmpty></isNotNull>
		</isEqual>
		
    	<isEqual property="queryId" compareValue="completeList">
    	/* 완료된 업무목록 조건절 */
	    	<isNotNull property="partition"><isNotEmpty property="partition" prepend="AND">
				PARTI.PARTITION_ID = #partition#
		    </isNotEmpty></isNotNull>
		    <isNotNull property="startPeriod"><isNotEmpty property="startPeriod" prepend="AND">
				INS.FINISHED_DATE 	>= TO_DATE(REPLACE(#startPeriod#,'.','')||'000000', 'YYYYMMDDHH24MISS')
	        </isNotEmpty></isNotNull>
			<isNotNull property="endPeriod"><isNotEmpty property="endPeriod" prepend="AND">
				TO_DATE(REPLACE(#endPeriod#,'.','')||'235959', 'YYYYMMDDHH24MISS') >= INS.FINISHED_DATE
	        </isNotEmpty></isNotNull>
			<isNotNull property="searchkeyword"><isNotEmpty property="searchkeyword">
		        <isEqual prepend="AND" property="searchcondition" compareValue="PROCESS">
		            PROC.PROCESS_NAME LIKE '%' || #searchkeyword# || '%'
		        </isEqual>
		        <isEqual prepend="AND" property="searchcondition" compareValue="ACTIVITY">
		            ACT.ACTIVITY_NAME LIKE '%' || #searchkeyword# || '%'
		        </isEqual>
		        <isEqual prepend="AND" property="searchcondition" compareValue="TITLE">
		            INS.TITLE LIKE '%' || #searchkeyword# || '%'
		        </isEqual>
			</isNotEmpty></isNotNull>
			<isNotNull property="requestorId"><isNotEmpty property="requestorId">
		        AND INS.PERFORMER_ID = #requestorId#
		    </isNotEmpty></isNotNull>
			<isNotNull property="apprDocState"><isNotEmpty property="apprDocState">
				AND INS.STATE = #apprDocState#
		    </isNotEmpty></isNotNull>
		</isEqual>
		
		<isEqual property="queryId" compareValue="myRequestList">
		/* 상신함 조건절 */
			<isNotNull property="startPeriod"><isNotEmpty property="startPeriod">
			<isNotNull property="endPeriod"><isNotEmpty property="endPeriod" prepend="AND">
				INS.CREATE_DATE 	BETWEEN TO_DATE(REPLACE(#startPeriod#,'.','')||'000000', 'YYYYMMDDHH24MISS')
										AND TO_DATE(REPLACE(#endPeriod#,'.','')||'235959', 'YYYYMMDDHH24MISS')
	        </isNotEmpty></isNotNull>
			</isNotEmpty></isNotNull>
			<isNotNull property="searchkeyword"><isNotEmpty property="searchkeyword">
        <isEqual prepend="AND" property="searchcondition" compareValue="TITLE">
            INS.TITLE LIKE '%' || #searchkeyword# || '%'
        </isEqual>
      </isNotEmpty></isNotNull>
			<isNotNull property="apprDocState"><isNotEmpty property="apprDocState">
		         AND INS.STATE = #apprDocState#
	    	</isNotEmpty></isNotNull>
		</isEqual>
  	</sql>
    
    <select id="startProcList" parameterClass="workplaceItemSearchCondition" resultClass="ProcessBean">
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.startProcList */
		SELECT *
		FROM (
			SELECT ROWNUM AS RNUM, A.* FROM ( 
		         /* START========================================= */
				SELECT  PARTI.PARTITION_ID AS partitionId, PARTI.PARTITION_NAME AS partitionName, PROC.PROCESS_ID AS processId
						, PROC.PROCESS_NAME AS processName, ACT2.ACTIVITY_ID AS activityId, ACT2.ACTIVITY_NAME AS activityName
						, USR.USER_NAME AS authorName, USR.USER_ENGLISH_NAME as userEnglishName
						, PROC.CREATE_DATE AS createDate, PROC.PROCESS_TYPE AS processType
						, PROC.PROCESS_VER AS processVer
				  FROM  IKEP4_WF_PARTITION PARTI,
				  		IKEP4_WF_PROCESS PROC,
				        IKEP4_WF_ACTIVITY ACT,
				        IKEP4_WF_ACTIVITY ACT2,
				        IKEP4_WF_TRANSITION TRANS,
				        IKEP4_EV_USER USR
				 WHERE  ACT.SUB_TYPE = 'StartEvent'
				   AND  ACT.PROCESS_ID = TRANS.PROCESS_ID
				   AND  ACT.PROCESS_VER = TRANS.PROCESS_VER
				   AND  ACT.ACTIVITY_ID = TRANS.TRANSITION_FROM
				   AND  ACT2.PROCESS_ID = TRANS.PROCESS_ID
				   AND  ACT2.PROCESS_VER = TRANS.PROCESS_VER
				   AND  ACT2.ACTIVITY_ID = TRANS.TRANSITION_TO
				   AND  PROC.PROCESS_ID = ACT.PROCESS_ID
				   AND  PROC.AUTHOR = USR.USER_ID
				   AND  PROC.PARTITION_ID = PARTI.PARTITION_ID
				   AND	PROC.PROCESS_STATE = 'ACTIVE'
				   AND 	PROC.PROCESS_ID > ' '
                   AND 	PROC.PROCESS_VER > ' '
                   AND 	ACT.ACTIVITY_ID > ' '
                   AND 	ACT2.ACTIVITY_ID > ' '
                   AND 	TRANS.TRANSITION_ID > ' '
				
				<include refid="whereList"/>
				
				ORDER BY PROC.CREATE_DATE DESC
				 /* ===========================================END  */ 
		 <![CDATA[  
			) A WHERE ROWNUM <=  #endRowIndex# /* 종료  */
		) WHERE RNUM >  #startRowIndex# /* 시작 */
		]]>
   </select>  
	
	<select id="countstartProcList" parameterClass="workplaceItemSearchCondition" resultClass="int">  
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.countstartProcList */
		<![CDATA[
		SELECT  COUNT(*)                            
		  FROM  IKEP4_WF_PARTITION PARTI,
		  		IKEP4_WF_PROCESS PROC,
		        IKEP4_WF_ACTIVITY ACT,
		        IKEP4_WF_ACTIVITY ACT2,
		        IKEP4_WF_TRANSITION TRANS,
		        IKEP4_EV_USER USR
		 WHERE  ACT.SUB_TYPE = 'StartEvent'
		   AND  ACT.PROCESS_ID = TRANS.PROCESS_ID
		   AND  ACT.PROCESS_VER = TRANS.PROCESS_VER
		   AND  ACT.ACTIVITY_ID = TRANS.TRANSITION_FROM
		   AND  ACT2.PROCESS_ID = TRANS.PROCESS_ID
		   AND  ACT2.PROCESS_VER = TRANS.PROCESS_VER
		   AND  ACT2.ACTIVITY_ID = TRANS.TRANSITION_TO
		   AND  PROC.PROCESS_ID = ACT.PROCESS_ID
		   AND  PROC.AUTHOR = USR.USER_ID
		   AND  PROC.PARTITION_ID = PARTI.PARTITION_ID
		   AND	PROC.PROCESS_STATE = 'ACTIVE'
		   AND 	PROC.PROCESS_ID > ' '
           AND 	PROC.PROCESS_VER > ' '
           AND 	ACT.ACTIVITY_ID > ' '
           AND 	ACT2.ACTIVITY_ID > ' '
           AND 	TRANS.TRANSITION_ID > ' '
		]]>		   
		
		<include refid="whereList"/>
		
	</select>

	<select id="todoList" parameterClass="workplaceItemSearchCondition" resultClass="WorkItemBean">
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.todoList */
		<![CDATA[ 
		SELECT *
		FROM (
			SELECT ROWNUM AS RNUM, A.* FROM ( 
		        /* START========================================= */
				SELECT  *   
				FROM (
				
			        SELECT 	insLogId, instanceId, partitionId, partitionName
			                , processId, processVer, processName, activityId, activityName
			                , title, performerId, performerName, state, stateName
			                , createDate, assignDate, selectDate, dueDate
			                , varSchema, procStartDate, procEndDate, instanceAuthor, instanceAuthorName    
			                , appKey01, appKey02, appKey03, appKey04, appKey05
			                , appKey06, appKey07, appKey08, appKey09, appKey10 
			                , openDate
			            FROM (
							SELECT 	insLogId, instanceId, partitionId, partitionName
					                , processId, processVer, processName, activityId, activityName
					                , title, performerId, performerName, state, stateName
					                , createDate, assignDate, selectDate, dueDate
					                , varSchema, procStartDate, procEndDate, instanceAuthor, USR.USER_NAME AS instanceAuthorName    
					                , appKey01, appKey02, appKey03, appKey04, appKey05
					                , appKey06, appKey07, appKey08, appKey09, appKey10 
					                , openDate
			                        , ( SELECT count(*)
			                              FROM IKEP4_WF_DELEGATE DELE
			                             WHERE USER_ID = #userId#
			                               AND IS_SETUP = 'Y'
			                               AND START_DATE <= SYSDATE
			                               AND SYSDATE < END_DATE
			                          ) DELE_FLAG                        
					          FROM (                  
					              /* 사용자 직접 지정 퍼포머 To-do를 가져오는 쿼리 */
					            SELECT  TODO.LOG_ID AS insLogId, TODO.INSTANCE_ID AS instanceId, PROC.PARTITION_ID AS partitionId, PARTI.PARTITION_NAME AS partitionName
					                , PROC.PROCESS_ID AS processId, PROC.PROCESS_VER AS processVer, PROC.PROCESS_NAME AS processName, TODO.ACTIVITY_ID AS activityId, TODO.ACTIVITY_NAME AS activityName
					                , TODO.TITLE, TODO.PERFORMER_ID AS performerId, '' AS performerName, TODO.STATE AS STATE, '' AS stateName
					                , TODO.CREATE_DATE AS createDate, TODO.ASSIGN_DATE AS assignDate, TODO.SELECT_DATE AS selectDate, TODO.DUE_DATE AS dueDate
					                , '' AS varSchema, INS.CREATE_DATE AS procStartDate, INS.FINISHED_DATE AS procEndDate, INS.PERFORMER_ID AS instanceAuthor    
					                , INS.APP_KEY01 AS appKey01, INS.APP_KEY02 AS appKey02, INS.APP_KEY03 AS appKey03, INS.APP_KEY04 AS appKey04, INS.APP_KEY05 AS appKey05
					                , INS.APP_KEY06 AS appKey06, INS.APP_KEY07 AS appKey07, INS.APP_KEY08 AS appKey08, INS.APP_KEY09 AS appKey09, INS.APP_KEY05 AS appKey10
					                , INS.OPEN_DATE AS openDate                        
					              FROM  IKEP4_WF_TODO_LIST TODO,                                                                
					                IKEP4_WF_PROCESS PROC, 
					                IKEP4_WF_INSTANCE INS,
					                IKEP4_WF_PARTITION PARTI,
					                (SELECT PROCESS_ID, PROCESS_VER, ACTIVITY_ID
					                   FROM IKEP4_WF_PARTICIPANT
			                          WHERE PARTICIPANT_SEQ IS NOT NULL
			                            AND (PARTICIPANT_TYPE = 'HUMAN' 
			                            AND (PERFORMER_ID IN (
												/* 위임처리 쿼리 */
			                                    SELECT USR.USER_ID AS PERFORMER_ID
			                                      FROM IKEP4_WF_DELEGATE DELE, IKEP4_EV_USER USR
			                                     WHERE USR.USER_ID = DELE.USER_ID (+)
			                                       AND ((DELE.MANDATOR_ID = #userId# 
			                                             AND DELE.IS_SETUP = 'Y' 
			                                             AND START_DATE <= SYSDATE 
			                                             AND SYSDATE <= END_DATE) OR USR.USER_ID = #userId#)                 
			                                )
			                            OR PERFORMER_ID IS NULL))
			                         ) ASGN
			                     WHERE  TODO.PROCESS_ID = PROC.PROCESS_ID 
			                       AND  TODO.PROCESS_VER = PROC.PROCESS_VER
			                       AND  TODO.PROCESS_ID = ASGN.PROCESS_ID
			                       AND  TODO.PROCESS_VER = ASGN.PROCESS_VER
			                       AND  TODO.ACTIVITY_ID = ASGN.ACTIVITY_ID
			                       AND  TODO.INSTANCE_ID = INS.INSTANCE_ID
			                       AND  PROC.PARTITION_ID = PARTI.PARTITION_ID(+)
			                       AND  (TODO.PERFORMER_ID = #userId# OR TODO.PERFORMER_ID is NULL)
			                       AND  PROC.PROCESS_STATE = 'ACTIVE'
			                    UNION
			                    /* 사용자 조직 지정 퍼포머 To-do를 가져오는 쿼리 */
			                   SELECT  TODO.LOG_ID AS insLogId, TODO.INSTANCE_ID AS instanceId, PROC.PARTITION_ID AS partitionId, PARTI.PARTITION_NAME AS partitionName
			                        , PROC.PROCESS_ID AS processId, PROC.PROCESS_VER AS processVer, PROC.PROCESS_NAME AS processName, TODO.ACTIVITY_ID AS activityId, TODO.ACTIVITY_NAME AS activityName
			                        , TODO.TITLE, TODO.PERFORMER_ID AS performerId, '' AS performerName, TODO.STATE AS STATE, '' AS stateName
			                        , TODO.CREATE_DATE AS createDate, TODO.ASSIGN_DATE AS assignDate, TODO.SELECT_DATE AS selectDate, TODO.DUE_DATE AS dueDate
			                        , '' AS varSchema, INS.CREATE_DATE AS procStartDate, INS.FINISHED_DATE AS procEndDate, INS.PERFORMER_ID AS instanceAuthor    
			                        , INS.APP_KEY01 AS appKey01, INS.APP_KEY02 AS appKey02, INS.APP_KEY03 AS appKey03, INS.APP_KEY04 AS appKey04, INS.APP_KEY05 AS appKey05
			                        , INS.APP_KEY06 AS appKey06, INS.APP_KEY07 AS appKey07, INS.APP_KEY08 AS appKey08, INS.APP_KEY09 AS appKey09, INS.APP_KEY10 AS appKey10
			                        , INS.OPEN_DATE AS openDate                     
			                    FROM      IKEP4_WF_TODO_LIST TODO,                                                                
			                            IKEP4_WF_PROCESS PROC, 
			                            IKEP4_WF_INSTANCE INS,
			                            IKEP4_WF_PARTITION PARTI,
			                            IKEP4_EV_USER_GROUP GRP,
			                            (SELECT PROCESS_ID, PROCESS_VER, ACTIVITY_ID, PERFORMER_ID 
			                               FROM IKEP4_WF_PARTICIPANT
			                              WHERE PARTICIPANT_SEQ IS NOT NULL
			                                AND (PARTICIPANT_TYPE = 'ORGANIZATIONAL_UNIT' AND PERFORMER_ID IS NOT NULL)
			                             ) ASGN
			                    WHERE  TODO.PROCESS_ID = PROC.PROCESS_ID 
			                           AND  TODO.PROCESS_VER = PROC.PROCESS_VER
			                           AND  TODO.PROCESS_ID = ASGN.PROCESS_ID
			                           AND  TODO.PROCESS_VER = ASGN.PROCESS_VER
			                           AND  TODO.ACTIVITY_ID = ASGN.ACTIVITY_ID
			                           AND  GRP.GROUP_ID = ASGN.PERFORMER_ID 
			                           AND  TODO.INSTANCE_ID = INS.INSTANCE_ID
			                           AND  PROC.PARTITION_ID = PARTI.PARTITION_ID(+)
			                           AND  GRP.USER_ID IN (
												/* 위임처리 쿼리 */
			                                    SELECT USR.USER_ID AS PERFORMER_ID
			                                      FROM IKEP4_WF_DELEGATE DELE, IKEP4_EV_USER USR
			                                     WHERE USR.USER_ID = DELE.USER_ID (+)
			                                       AND ((DELE.MANDATOR_ID = #userId# 
			                                             AND DELE.IS_SETUP = 'Y' 
			                                             AND START_DATE <= SYSDATE 
			                                             AND SYSDATE <= END_DATE) OR USR.USER_ID = #userId#)                 
			                                )           
			                           AND  PROC.PROCESS_STATE = 'ACTIVE'
			                   UNION 
			                    /* 사용자 ROLE 지정 퍼포머 To-do를 가져오는 쿼리 */
			                   SELECT  TODO.LOG_ID AS insLogId, TODO.INSTANCE_ID AS instanceId, PROC.PARTITION_ID AS partitionId, PARTI.PARTITION_NAME AS partitionName
			                        , PROC.PROCESS_ID AS processId, PROC.PROCESS_VER AS processVer, PROC.PROCESS_NAME AS processName, TODO.ACTIVITY_ID AS activityId, TODO.ACTIVITY_NAME AS activityName
			                        , TODO.TITLE, TODO.PERFORMER_ID AS performerId, '' AS performerName, TODO.STATE AS STATE, '' AS stateName
			                        , TODO.CREATE_DATE AS createDate, TODO.ASSIGN_DATE AS assignDate, TODO.SELECT_DATE AS selectDate, TODO.DUE_DATE AS dueDate
			                        , '' AS varSchema, INS.CREATE_DATE AS procStartDate, INS.FINISHED_DATE AS procEndDate, INS.PERFORMER_ID AS instanceAuthor    
			                        , INS.APP_KEY01 AS appKey01, INS.APP_KEY02 AS appKey02, INS.APP_KEY03 AS appKey03, INS.APP_KEY04 AS appKey04, INS.APP_KEY05 AS appKey05
			                        , INS.APP_KEY06 AS appKey06, INS.APP_KEY07 AS appKey07, INS.APP_KEY08 AS appKey08, INS.APP_KEY09 AS appKey09, INS.APP_KEY05 AS appKey10
			                        , INS.OPEN_DATE AS openDate                         
			                      FROM  IKEP4_WF_TODO_LIST TODO,                                                                
			                        IKEP4_WF_PROCESS PROC, 
			                        IKEP4_WF_INSTANCE INS,
			                        IKEP4_WF_PARTITION PARTI,
			                        IKEP4_EV_USER_ROLE RLE,
			                        (SELECT PROCESS_ID, PROCESS_VER, ACTIVITY_ID, PERFORMER_ID 
			                           FROM IKEP4_WF_PARTICIPANT
			                          WHERE PARTICIPANT_SEQ IS NOT NULL
			                            AND (PARTICIPANT_TYPE = 'ROLE' AND ( PERFORMER_ID IS NOT NULL))
			                         ) ASGN
			                     WHERE  TODO.PROCESS_ID = PROC.PROCESS_ID 
			                       AND  TODO.PROCESS_VER = PROC.PROCESS_VER
			                       AND  TODO.PROCESS_ID = ASGN.PROCESS_ID
			                       AND  TODO.PROCESS_VER = ASGN.PROCESS_VER
			                       AND  TODO.ACTIVITY_ID = ASGN.ACTIVITY_ID
			                       AND  RLE.ROLE_ID = ASGN.PERFORMER_ID
			                       AND  RLE.USER_ID IN (
			                                SELECT USR.USER_ID AS PERFORMER_ID
			                                  FROM IKEP4_WF_DELEGATE DELE, IKEP4_EV_USER USR
			                                 WHERE USR.USER_ID = DELE.USER_ID (+)
			                                   AND ((DELE.MANDATOR_ID = #userId# 
			                                         AND DELE.IS_SETUP = 'Y' 
			                                         AND START_DATE <= SYSDATE 
			                                         AND SYSDATE <= END_DATE) OR USR.USER_ID = #userId#)                 
			                            )
			                       AND  TODO.INSTANCE_ID = INS.INSTANCE_ID
			                       AND  PROC.PARTITION_ID = PARTI.PARTITION_ID(+)
			                       AND  (TODO.PERFORMER_ID = #userId# OR TODO.PERFORMER_ID is NULL) 
			                       AND  PROC.PROCESS_STATE = 'ACTIVE'       
			                    UNION
			                    /* 사용자 변수 지정 퍼포머 To-do를 가져오는 쿼리 */
			                    SELECT  TODO.LOG_ID AS insLogId, TODO.INSTANCE_ID AS instanceId, PROC.PARTITION_ID AS partitionId, PARTI.PARTITION_NAME AS partitionName
			                        , PROC.PROCESS_ID AS processId, PROC.PROCESS_VER AS processVer, PROC.PROCESS_NAME AS processName, TODO.ACTIVITY_ID AS activityId, TODO.ACTIVITY_NAME AS activityName
			                        , TODO.TITLE, TODO.PERFORMER_ID AS performerId, '' AS performerName, TODO.STATE AS STATE, '' AS stateName
			                        , TODO.CREATE_DATE AS createDate, TODO.ASSIGN_DATE AS assignDate, TODO.SELECT_DATE AS selectDate, TODO.DUE_DATE AS dueDate
			                        , '' AS varSchema, INS.CREATE_DATE AS procStartDate, INS.FINISHED_DATE AS procEndDate, INS.PERFORMER_ID AS instanceAuthor    
			                        , INS.APP_KEY01 AS appKey01, INS.APP_KEY02 AS appKey02, INS.APP_KEY03 AS appKey03, INS.APP_KEY04 AS appKey04, INS.APP_KEY05 AS appKey05
			                        , INS.APP_KEY06 AS appKey06, INS.APP_KEY07 AS appKey07, INS.APP_KEY08 AS appKey08, INS.APP_KEY09 AS appKey09, INS.APP_KEY05 AS appKey10
			                        , INS.OPEN_DATE AS openDate                         
			                      FROM  IKEP4_WF_TODO_LIST TODO,                                                                
			                        IKEP4_WF_PROCESS PROC, 
			                        IKEP4_WF_INSTANCE INS,
			                        IKEP4_WF_PARTITION PARTI,
			                        (
			                                    /* 사용자 변수 지정 퍼포머 To-do를 가져오는 쿼리 (단일변수)*/    
			                                  SELECT DISTINCT VAR_VALUE.PROCESS_ID, VAR_VALUE.PROCESS_VER, VAR_VALUE.ACTIVITY_ID, VAR_VALUE.VAR_ID, '' AS VAR_KEY1, VAR_VALUE.VAR_KEY, VAR_VALUE.VAR_VALUE, VAR_VALUE.PERFORMER_ID, VAR_VALUE.INSTANCE_ID, VAR_VALUE.INDEX_VAR 
			                                    FROM 
			                                        ( 
			                                         SELECT  PAR.PROCESS_ID, PAR.PROCESS_VER, PAR.ACTIVITY_ID, VAR.VAR_ID, VAR.VAR_KEY, VAR.VAR_VALUE, PAR.PERFORMER_ID, VAR.INSTANCE_ID, PAR.INDEX_VAR   
			                                           FROM IKEP4_WF_PARTICIPANT PAR, IKEP4_WF_INSTANCE_VAR VAR
			                                          WHERE PAR.PARTICIPANT_SEQ IS NOT NULL
			                                            AND PAR.PROCESS_ID = VAR.PROCESS_ID
			                                            AND PAR.PROCESS_VER = VAR.PROCESS_VER
			                                            AND PAR.PERFORMER_ID = VAR.VAR_ID
			                                            AND VAR.VAR_VALUE IN (
																/* 위임처리 쿼리 */
			                                                    SELECT USR.USER_ID AS PERFORMER_ID
			                                                      FROM IKEP4_WF_DELEGATE DELE, IKEP4_EV_USER USR
			                                                     WHERE USR.USER_ID = DELE.USER_ID (+)
			                                                       AND ((DELE.MANDATOR_ID = #userId# 
			                                                             AND DELE.IS_SETUP = 'Y' 
			                                                             AND START_DATE <= SYSDATE 
			                                                             AND SYSDATE <= END_DATE) OR USR.USER_ID = #userId#)                 
			                                                )
			                                            AND ( ( PAR.PARTICIPANT_TYPE = 'SYSTEM' AND VAR.VAR_VALUE IS NOT NULL ) )
			                                            AND PAR.INDEX_VAR IS NULL
			                                        ) VAR_VALUE
			                               UNION      
			                                   	/* 사용자 변수 지정 퍼포머 To-do를 가져오는 쿼리 (배열변수)*/                     
			                                  SELECT DISTINCT VAR_VALUE.PROCESS_ID, VAR_VALUE.PROCESS_VER, VAR_VALUE.ACTIVITY_ID, VAR_VALUE.VAR_ID, IDNX_VAR.VAR_KEY  AS VAR_KEY1, VAR_VALUE.VAR_KEY, VAR_VALUE.VAR_VALUE, VAR_VALUE.PERFORMER_ID, VAR_VALUE.INSTANCE_ID, VAR_VALUE.INDEX_VAR 
			                                    FROM 
			                                        ( 
			                                         SELECT  PAR.PROCESS_ID, PAR.PROCESS_VER, PAR.ACTIVITY_ID, VAR.VAR_ID, VAR.VAR_KEY, VAR.VAR_VALUE, PAR.PERFORMER_ID, VAR.INSTANCE_ID, PAR.INDEX_VAR   
			                                           FROM IKEP4_WF_PARTICIPANT PAR, IKEP4_WF_INSTANCE_VAR VAR
			                                          WHERE PAR.PARTICIPANT_SEQ IS NOT NULL
			                                            AND PAR.PROCESS_ID = VAR.PROCESS_ID
			                                            AND PAR.PROCESS_VER = VAR.PROCESS_VER
			                                            AND PAR.INDEX_VAR = VAR.VAR_ID
			                                            AND ( ( PAR.PARTICIPANT_TYPE = 'SYSTEM' AND VAR.VAR_VALUE IS NOT NULL ) )
			                                        ) IDNX_VAR,
			                                        (
			                                         SELECT  PAR.PROCESS_ID, PAR.PROCESS_VER, PAR.ACTIVITY_ID, VAR.VAR_ID, VAR.VAR_KEY, VAR.VAR_VALUE, PAR.PERFORMER_ID, VAR.INSTANCE_ID, PAR.INDEX_VAR   
			                                           FROM IKEP4_WF_PARTICIPANT PAR, IKEP4_WF_INSTANCE_VAR VAR
			                                          WHERE PAR.PARTICIPANT_SEQ IS NOT NULL
			                                            AND PAR.PROCESS_ID = VAR.PROCESS_ID
			                                            AND PAR.PROCESS_VER = VAR.PROCESS_VER
			                                            AND PAR.PERFORMER_ID = VAR.VAR_ID
			                                            AND VAR.VAR_VALUE IN (
																/* 위임처리 쿼리 */
			                                                    SELECT USR.USER_ID AS PERFORMER_ID
			                                                      FROM IKEP4_WF_DELEGATE DELE, IKEP4_EV_USER USR
			                                                     WHERE USR.USER_ID = DELE.USER_ID (+)
			                                                       AND ((DELE.MANDATOR_ID = #userId# 
			                                                             AND DELE.IS_SETUP = 'Y' 
			                                                             AND START_DATE <= SYSDATE 
			                                                             AND SYSDATE <= END_DATE) OR USR.USER_ID = #userId#)                
			                                                )
			                                            AND ( ( PAR.PARTICIPANT_TYPE = 'SYSTEM' AND VAR.VAR_KEY IS NOT NULL ) )
			                                        ) VAR_VALUE
			                                   WHERE IDNX_VAR.INSTANCE_ID = VAR_VALUE.INSTANCE_ID
			                                     AND IDNX_VAR.VAR_VALUE = VAR_VALUE.VAR_KEY
			                                     AND IDNX_VAR.PERFORMER_ID = VAR_VALUE.PERFORMER_ID   
										UNION
												/* 단일변수에 조직ID로 지정되고 조직의 manager로 지정일 될 경우*/    
			                                  SELECT DISTINCT VAR_VALUE.PROCESS_ID, VAR_VALUE.PROCESS_VER, VAR_VALUE.ACTIVITY_ID, VAR_VALUE.VAR_ID, '' AS VAR_KEY1, VAR_VALUE.VAR_KEY, VAR_VALUE.VAR_VALUE, VAR_VALUE.PERFORMER_ID, VAR_VALUE.INSTANCE_ID, VAR_VALUE.INDEX_VAR 
			                                    FROM 
			                                        ( 
			                                         SELECT PAR.PROCESS_ID, PAR.PROCESS_VER, PAR.ACTIVITY_ID, VAR.VAR_ID, VAR.VAR_KEY, VAR.VAR_VALUE, GRP.LEADER_ID AS PERFORMER_ID, VAR.INSTANCE_ID, PAR.INDEX_VAR 
			                                           FROM IKEP4_WF_PARTICIPANT PAR, IKEP4_WF_INSTANCE_VAR VAR, IKEP4_EV_GROUP GRP
			                                          WHERE PAR.RULE_CONSTRAINT = 'MANAGER_OF'
			                                            AND PAR.PROCESS_ID = VAR.PROCESS_ID
			                                            AND PAR.PROCESS_VER = VAR.PROCESS_VER
			                                            AND PAR.PERFORMER_ID = VAR.VAR_ID
			                                            AND GRP.GROUP_ID = VAR.VAR_VALUE
			                                            AND GRP.LEADER_ID = #userId#
			                                        ) VAR_VALUE 
			                           )  ASGN
			                     WHERE  TODO.PROCESS_ID = PROC.PROCESS_ID 
			                       AND  TODO.PROCESS_VER = PROC.PROCESS_VER
			                       AND  TODO.PROCESS_ID = ASGN.PROCESS_ID
			                       AND  TODO.PROCESS_VER = ASGN.PROCESS_VER
			                       AND  TODO.ACTIVITY_ID = ASGN.ACTIVITY_ID
			                       AND TODO.INSTANCE_ID = ASGN.INSTANCE_ID
			                       AND  TODO.INSTANCE_ID = INS.INSTANCE_ID
			                       AND  PROC.PARTITION_ID = PARTI.PARTITION_ID(+)
			                       AND  (TODO.PERFORMER_ID = #userId# OR TODO.PERFORMER_ID is NULL)
			                       AND  PROC.PROCESS_STATE = 'ACTIVE'
			                    ) LST,
			                    IKEP4_EV_USER USR
			              WHERE LST.INSTANCEAUTHOR = USR.USER_ID
			                AND (SYSDATE <= LST.openDate OR LST.openDate IS NULL)
			              )
			        WHERE DELE_FLAG = '0'
		      	  					           
			    	)
			 ]]>	
				   <include refid="whereList"/>
				   
				 <isEmpty property="sortColumn" >ORDER BY createDate DESC, instanceId ASC</isEmpty>
				 <isNotEmpty property="sortColumn" >ORDER BY $sortColumn$ $sortType$</isNotEmpty>
				 /* ===========================================END  */ 
		 <![CDATA[  
			) A WHERE ROWNUM <=  #endRowIndex# /* 종료  */
		) WHERE RNUM >  #startRowIndex# /* 시작 */
		]]>
   </select>  
	
	<select id="counttodoList" parameterClass="workplaceItemSearchCondition" resultClass="int">  
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.counttodoList */
		<![CDATA[
		SELECT  COUNT(*)                            
		  FROM (
		  
			        SELECT 	insLogId, instanceId, partitionId, partitionName
			                , processId, processVer, processName, activityId, activityName
			                , title, performerId, performerName, state, stateName
			                , createDate, assignDate, selectDate, dueDate
			                , varSchema, procStartDate, procEndDate, instanceAuthor, instanceAuthorName    
			                , appKey01, appKey02, appKey03, appKey04, appKey05
			                , appKey06, appKey07, appKey08, appKey09, appKey10 
			                , openDate
			            FROM (
							SELECT 	insLogId, instanceId, partitionId, partitionName
					                , processId, processVer, processName, activityId, activityName
					                , title, performerId, performerName, state, stateName
					                , createDate, assignDate, selectDate, dueDate
					                , varSchema, procStartDate, procEndDate, instanceAuthor, USR.USER_NAME AS instanceAuthorName    
					                , appKey01, appKey02, appKey03, appKey04, appKey05
					                , appKey06, appKey07, appKey08, appKey09, appKey10 
					                , openDate
			                        , ( SELECT count(*)
			                              FROM IKEP4_WF_DELEGATE DELE
			                             WHERE USER_ID = #userId#
			                               AND IS_SETUP = 'Y'
			                               AND START_DATE <= SYSDATE
			                               AND SYSDATE < END_DATE
			                          ) DELE_FLAG                        
					          FROM (                  
					              /* 사용자 직접 지정 퍼포머 To-do를 가져오는 쿼리 */
					            SELECT  TODO.LOG_ID AS insLogId, TODO.INSTANCE_ID AS instanceId, PROC.PARTITION_ID AS partitionId, PARTI.PARTITION_NAME AS partitionName
					                , PROC.PROCESS_ID AS processId, PROC.PROCESS_VER AS processVer, PROC.PROCESS_NAME AS processName, TODO.ACTIVITY_ID AS activityId, TODO.ACTIVITY_NAME AS activityName
					                , TODO.TITLE, TODO.PERFORMER_ID AS performerId, '' AS performerName, TODO.STATE AS STATE, '' AS stateName
					                , TODO.CREATE_DATE AS createDate, TODO.ASSIGN_DATE AS assignDate, TODO.SELECT_DATE AS selectDate, TODO.DUE_DATE AS dueDate
					                , '' AS varSchema, INS.CREATE_DATE AS procStartDate, INS.FINISHED_DATE AS procEndDate, INS.PERFORMER_ID AS instanceAuthor    
					                , INS.APP_KEY01 AS appKey01, INS.APP_KEY02 AS appKey02, INS.APP_KEY03 AS appKey03, INS.APP_KEY04 AS appKey04, INS.APP_KEY05 AS appKey05
					                , INS.APP_KEY06 AS appKey06, INS.APP_KEY07 AS appKey07, INS.APP_KEY08 AS appKey08, INS.APP_KEY09 AS appKey09, INS.APP_KEY05 AS appKey10
					                , INS.OPEN_DATE AS openDate                        
					              FROM  IKEP4_WF_TODO_LIST TODO,                                                                
					                IKEP4_WF_PROCESS PROC, 
					                IKEP4_WF_INSTANCE INS,
					                IKEP4_WF_PARTITION PARTI,
					                (SELECT PROCESS_ID, PROCESS_VER, ACTIVITY_ID
					                   FROM IKEP4_WF_PARTICIPANT
			                          WHERE PARTICIPANT_SEQ IS NOT NULL
			                            AND (PARTICIPANT_TYPE = 'HUMAN' 
			                            AND (PERFORMER_ID IN (
												/* 위임처리 쿼리 */
			                                    SELECT USR.USER_ID AS PERFORMER_ID
			                                      FROM IKEP4_WF_DELEGATE DELE, IKEP4_EV_USER USR
			                                     WHERE USR.USER_ID = DELE.USER_ID (+)
			                                       AND ((DELE.MANDATOR_ID = #userId# 
			                                             AND DELE.IS_SETUP = 'Y' 
			                                             AND START_DATE <= SYSDATE 
			                                             AND SYSDATE <= END_DATE) OR USR.USER_ID = #userId#)                 
			                                )
			                            OR PERFORMER_ID IS NULL))
			                         ) ASGN
			                     WHERE  TODO.PROCESS_ID = PROC.PROCESS_ID 
			                       AND  TODO.PROCESS_VER = PROC.PROCESS_VER
			                       AND  TODO.PROCESS_ID = ASGN.PROCESS_ID
			                       AND  TODO.PROCESS_VER = ASGN.PROCESS_VER
			                       AND  TODO.ACTIVITY_ID = ASGN.ACTIVITY_ID
			                       AND  TODO.INSTANCE_ID = INS.INSTANCE_ID
			                       AND  PROC.PARTITION_ID = PARTI.PARTITION_ID(+)
			                       AND  (TODO.PERFORMER_ID = #userId# OR TODO.PERFORMER_ID is NULL)
			                       AND  PROC.PROCESS_STATE = 'ACTIVE'
			                    UNION
			                    /* 사용자 조직 지정 퍼포머 To-do를 가져오는 쿼리 */
			                   SELECT  TODO.LOG_ID AS insLogId, TODO.INSTANCE_ID AS instanceId, PROC.PARTITION_ID AS partitionId, PARTI.PARTITION_NAME AS partitionName
			                        , PROC.PROCESS_ID AS processId, PROC.PROCESS_VER AS processVer, PROC.PROCESS_NAME AS processName, TODO.ACTIVITY_ID AS activityId, TODO.ACTIVITY_NAME AS activityName
			                        , TODO.TITLE, TODO.PERFORMER_ID AS performerId, '' AS performerName, TODO.STATE AS STATE, '' AS stateName
			                        , TODO.CREATE_DATE AS createDate, TODO.ASSIGN_DATE AS assignDate, TODO.SELECT_DATE AS selectDate, TODO.DUE_DATE AS dueDate
			                        , '' AS varSchema, INS.CREATE_DATE AS procStartDate, INS.FINISHED_DATE AS procEndDate, INS.PERFORMER_ID AS instanceAuthor    
			                        , INS.APP_KEY01 AS appKey01, INS.APP_KEY02 AS appKey02, INS.APP_KEY03 AS appKey03, INS.APP_KEY04 AS appKey04, INS.APP_KEY05 AS appKey05
			                        , INS.APP_KEY06 AS appKey06, INS.APP_KEY07 AS appKey07, INS.APP_KEY08 AS appKey08, INS.APP_KEY09 AS appKey09, INS.APP_KEY10 AS appKey10
			                        , INS.OPEN_DATE AS openDate                     
			                    FROM      IKEP4_WF_TODO_LIST TODO,                                                                
			                            IKEP4_WF_PROCESS PROC, 
			                            IKEP4_WF_INSTANCE INS,
			                            IKEP4_WF_PARTITION PARTI,
			                            IKEP4_EV_USER_GROUP GRP,
			                            (SELECT PROCESS_ID, PROCESS_VER, ACTIVITY_ID, PERFORMER_ID 
			                               FROM IKEP4_WF_PARTICIPANT
			                              WHERE PARTICIPANT_SEQ IS NOT NULL
			                                AND (PARTICIPANT_TYPE = 'ORGANIZATIONAL_UNIT' AND PERFORMER_ID IS NOT NULL)
			                             ) ASGN
			                    WHERE  TODO.PROCESS_ID = PROC.PROCESS_ID 
			                           AND  TODO.PROCESS_VER = PROC.PROCESS_VER
			                           AND  TODO.PROCESS_ID = ASGN.PROCESS_ID
			                           AND  TODO.PROCESS_VER = ASGN.PROCESS_VER
			                           AND  TODO.ACTIVITY_ID = ASGN.ACTIVITY_ID
			                           AND  GRP.GROUP_ID = ASGN.PERFORMER_ID 
			                           AND  TODO.INSTANCE_ID = INS.INSTANCE_ID
			                           AND  PROC.PARTITION_ID = PARTI.PARTITION_ID(+)
			                           AND  GRP.USER_ID IN (
												/* 위임처리 쿼리 */
			                                    SELECT USR.USER_ID AS PERFORMER_ID
			                                      FROM IKEP4_WF_DELEGATE DELE, IKEP4_EV_USER USR
			                                     WHERE USR.USER_ID = DELE.USER_ID (+)
			                                       AND ((DELE.MANDATOR_ID = #userId# 
			                                             AND DELE.IS_SETUP = 'Y' 
			                                             AND START_DATE <= SYSDATE 
			                                             AND SYSDATE <= END_DATE) OR USR.USER_ID = #userId#)                 
			                                )           
			                           AND  PROC.PROCESS_STATE = 'ACTIVE'
			                   UNION 
			                    /* 사용자 ROLE 지정 퍼포머 To-do를 가져오는 쿼리 */
			                   SELECT  TODO.LOG_ID AS insLogId, TODO.INSTANCE_ID AS instanceId, PROC.PARTITION_ID AS partitionId, PARTI.PARTITION_NAME AS partitionName
			                        , PROC.PROCESS_ID AS processId, PROC.PROCESS_VER AS processVer, PROC.PROCESS_NAME AS processName, TODO.ACTIVITY_ID AS activityId, TODO.ACTIVITY_NAME AS activityName
			                        , TODO.TITLE, TODO.PERFORMER_ID AS performerId, '' AS performerName, TODO.STATE AS STATE, '' AS stateName
			                        , TODO.CREATE_DATE AS createDate, TODO.ASSIGN_DATE AS assignDate, TODO.SELECT_DATE AS selectDate, TODO.DUE_DATE AS dueDate
			                        , '' AS varSchema, INS.CREATE_DATE AS procStartDate, INS.FINISHED_DATE AS procEndDate, INS.PERFORMER_ID AS instanceAuthor    
			                        , INS.APP_KEY01 AS appKey01, INS.APP_KEY02 AS appKey02, INS.APP_KEY03 AS appKey03, INS.APP_KEY04 AS appKey04, INS.APP_KEY05 AS appKey05
			                        , INS.APP_KEY06 AS appKey06, INS.APP_KEY07 AS appKey07, INS.APP_KEY08 AS appKey08, INS.APP_KEY09 AS appKey09, INS.APP_KEY05 AS appKey10
			                        , INS.OPEN_DATE AS openDate                         
			                      FROM  IKEP4_WF_TODO_LIST TODO,                                                                
			                        IKEP4_WF_PROCESS PROC, 
			                        IKEP4_WF_INSTANCE INS,
			                        IKEP4_WF_PARTITION PARTI,
			                        IKEP4_EV_USER_ROLE RLE,
			                        (SELECT PROCESS_ID, PROCESS_VER, ACTIVITY_ID, PERFORMER_ID 
			                           FROM IKEP4_WF_PARTICIPANT
			                          WHERE PARTICIPANT_SEQ IS NOT NULL
			                            AND (PARTICIPANT_TYPE = 'ROLE' AND ( PERFORMER_ID IS NOT NULL))
			                         ) ASGN
			                     WHERE  TODO.PROCESS_ID = PROC.PROCESS_ID 
			                       AND  TODO.PROCESS_VER = PROC.PROCESS_VER
			                       AND  TODO.PROCESS_ID = ASGN.PROCESS_ID
			                       AND  TODO.PROCESS_VER = ASGN.PROCESS_VER
			                       AND  TODO.ACTIVITY_ID = ASGN.ACTIVITY_ID
			                       AND  RLE.ROLE_ID = ASGN.PERFORMER_ID
			                       AND  RLE.USER_ID IN (
			                                SELECT USR.USER_ID AS PERFORMER_ID
			                                  FROM IKEP4_WF_DELEGATE DELE, IKEP4_EV_USER USR
			                                 WHERE USR.USER_ID = DELE.USER_ID (+)
			                                   AND ((DELE.MANDATOR_ID = #userId# 
			                                         AND DELE.IS_SETUP = 'Y' 
			                                         AND START_DATE <= SYSDATE 
			                                         AND SYSDATE <= END_DATE) OR USR.USER_ID = #userId#)                 
			                            )
			                       AND  TODO.INSTANCE_ID = INS.INSTANCE_ID
			                       AND  PROC.PARTITION_ID = PARTI.PARTITION_ID(+)
			                       AND  (TODO.PERFORMER_ID = #userId# OR TODO.PERFORMER_ID is NULL) 
			                       AND  PROC.PROCESS_STATE = 'ACTIVE'       
			                    UNION
			                    /* 사용자 변수 지정 퍼포머 To-do를 가져오는 쿼리 */
			                    SELECT  TODO.LOG_ID AS insLogId, TODO.INSTANCE_ID AS instanceId, PROC.PARTITION_ID AS partitionId, PARTI.PARTITION_NAME AS partitionName
			                        , PROC.PROCESS_ID AS processId, PROC.PROCESS_VER AS processVer, PROC.PROCESS_NAME AS processName, TODO.ACTIVITY_ID AS activityId, TODO.ACTIVITY_NAME AS activityName
			                        , TODO.TITLE, TODO.PERFORMER_ID AS performerId, '' AS performerName, TODO.STATE AS STATE, '' AS stateName
			                        , TODO.CREATE_DATE AS createDate, TODO.ASSIGN_DATE AS assignDate, TODO.SELECT_DATE AS selectDate, TODO.DUE_DATE AS dueDate
			                        , '' AS varSchema, INS.CREATE_DATE AS procStartDate, INS.FINISHED_DATE AS procEndDate, INS.PERFORMER_ID AS instanceAuthor    
			                        , INS.APP_KEY01 AS appKey01, INS.APP_KEY02 AS appKey02, INS.APP_KEY03 AS appKey03, INS.APP_KEY04 AS appKey04, INS.APP_KEY05 AS appKey05
			                        , INS.APP_KEY06 AS appKey06, INS.APP_KEY07 AS appKey07, INS.APP_KEY08 AS appKey08, INS.APP_KEY09 AS appKey09, INS.APP_KEY05 AS appKey10
			                        , INS.OPEN_DATE AS openDate                         
			                      FROM  IKEP4_WF_TODO_LIST TODO,                                                                
			                        IKEP4_WF_PROCESS PROC, 
			                        IKEP4_WF_INSTANCE INS,
			                        IKEP4_WF_PARTITION PARTI,
			                        (
			                                    /* 사용자 변수 지정 퍼포머 To-do를 가져오는 쿼리 (단일변수)*/    
			                                  SELECT DISTINCT VAR_VALUE.PROCESS_ID, VAR_VALUE.PROCESS_VER, VAR_VALUE.ACTIVITY_ID, VAR_VALUE.VAR_ID, '' AS VAR_KEY1, VAR_VALUE.VAR_KEY, VAR_VALUE.VAR_VALUE, VAR_VALUE.PERFORMER_ID, VAR_VALUE.INSTANCE_ID, VAR_VALUE.INDEX_VAR 
			                                    FROM 
			                                        ( 
			                                         SELECT  PAR.PROCESS_ID, PAR.PROCESS_VER, PAR.ACTIVITY_ID, VAR.VAR_ID, VAR.VAR_KEY, VAR.VAR_VALUE, PAR.PERFORMER_ID, VAR.INSTANCE_ID, PAR.INDEX_VAR   
			                                           FROM IKEP4_WF_PARTICIPANT PAR, IKEP4_WF_INSTANCE_VAR VAR
			                                          WHERE PAR.PARTICIPANT_SEQ IS NOT NULL
			                                            AND PAR.PROCESS_ID = VAR.PROCESS_ID
			                                            AND PAR.PROCESS_VER = VAR.PROCESS_VER
			                                            AND PAR.PERFORMER_ID = VAR.VAR_ID
			                                            AND VAR.VAR_VALUE IN (
																/* 위임처리 쿼리 */
			                                                    SELECT USR.USER_ID AS PERFORMER_ID
			                                                      FROM IKEP4_WF_DELEGATE DELE, IKEP4_EV_USER USR
			                                                     WHERE USR.USER_ID = DELE.USER_ID (+)
			                                                       AND ((DELE.MANDATOR_ID = #userId# 
			                                                             AND DELE.IS_SETUP = 'Y' 
			                                                             AND START_DATE <= SYSDATE 
			                                                             AND SYSDATE <= END_DATE) OR USR.USER_ID = #userId#)                 
			                                                )
			                                            AND ( ( PAR.PARTICIPANT_TYPE = 'SYSTEM' AND VAR.VAR_VALUE IS NOT NULL ) )
			                                            AND PAR.INDEX_VAR IS NULL
			                                        ) VAR_VALUE
			                               UNION      
			                                   	/* 사용자 변수 지정 퍼포머 To-do를 가져오는 쿼리 (배열변수)*/                     
			                                  SELECT DISTINCT VAR_VALUE.PROCESS_ID, VAR_VALUE.PROCESS_VER, VAR_VALUE.ACTIVITY_ID, VAR_VALUE.VAR_ID, IDNX_VAR.VAR_KEY  AS VAR_KEY1, VAR_VALUE.VAR_KEY, VAR_VALUE.VAR_VALUE, VAR_VALUE.PERFORMER_ID, VAR_VALUE.INSTANCE_ID, VAR_VALUE.INDEX_VAR 
			                                    FROM 
			                                        ( 
			                                         SELECT  PAR.PROCESS_ID, PAR.PROCESS_VER, PAR.ACTIVITY_ID, VAR.VAR_ID, VAR.VAR_KEY, VAR.VAR_VALUE, PAR.PERFORMER_ID, VAR.INSTANCE_ID, PAR.INDEX_VAR   
			                                           FROM IKEP4_WF_PARTICIPANT PAR, IKEP4_WF_INSTANCE_VAR VAR
			                                          WHERE PAR.PARTICIPANT_SEQ IS NOT NULL
			                                            AND PAR.PROCESS_ID = VAR.PROCESS_ID
			                                            AND PAR.PROCESS_VER = VAR.PROCESS_VER
			                                            AND PAR.INDEX_VAR = VAR.VAR_ID
			                                            AND ( ( PAR.PARTICIPANT_TYPE = 'SYSTEM' AND VAR.VAR_VALUE IS NOT NULL ) )
			                                        ) IDNX_VAR,
			                                        (
			                                         SELECT  PAR.PROCESS_ID, PAR.PROCESS_VER, PAR.ACTIVITY_ID, VAR.VAR_ID, VAR.VAR_KEY, VAR.VAR_VALUE, PAR.PERFORMER_ID, VAR.INSTANCE_ID, PAR.INDEX_VAR   
			                                           FROM IKEP4_WF_PARTICIPANT PAR, IKEP4_WF_INSTANCE_VAR VAR
			                                          WHERE PAR.PARTICIPANT_SEQ IS NOT NULL
			                                            AND PAR.PROCESS_ID = VAR.PROCESS_ID
			                                            AND PAR.PROCESS_VER = VAR.PROCESS_VER
			                                            AND PAR.PERFORMER_ID = VAR.VAR_ID
			                                            AND VAR.VAR_VALUE IN (
																/* 위임처리 쿼리 */
			                                                    SELECT USR.USER_ID AS PERFORMER_ID
			                                                      FROM IKEP4_WF_DELEGATE DELE, IKEP4_EV_USER USR
			                                                     WHERE USR.USER_ID = DELE.USER_ID (+)
			                                                       AND ((DELE.MANDATOR_ID = #userId# 
			                                                             AND DELE.IS_SETUP = 'Y' 
			                                                             AND START_DATE <= SYSDATE 
			                                                             AND SYSDATE <= END_DATE) OR USR.USER_ID = #userId#)                
			                                                )
			                                            AND ( ( PAR.PARTICIPANT_TYPE = 'SYSTEM' AND VAR.VAR_KEY IS NOT NULL ) )
			                                        ) VAR_VALUE
			                                   WHERE IDNX_VAR.INSTANCE_ID = VAR_VALUE.INSTANCE_ID
			                                     AND IDNX_VAR.VAR_VALUE = VAR_VALUE.VAR_KEY
			                                     AND IDNX_VAR.PERFORMER_ID = VAR_VALUE.PERFORMER_ID   
										UNION
												/* 단일변수에 조직ID로 지정되고 조직의 manager로 지정일 될 경우*/    
			                                  SELECT DISTINCT VAR_VALUE.PROCESS_ID, VAR_VALUE.PROCESS_VER, VAR_VALUE.ACTIVITY_ID, VAR_VALUE.VAR_ID, '' AS VAR_KEY1, VAR_VALUE.VAR_KEY, VAR_VALUE.VAR_VALUE, VAR_VALUE.PERFORMER_ID, VAR_VALUE.INSTANCE_ID, VAR_VALUE.INDEX_VAR 
			                                    FROM 
			                                        ( 
			                                         SELECT PAR.PROCESS_ID, PAR.PROCESS_VER, PAR.ACTIVITY_ID, VAR.VAR_ID, VAR.VAR_KEY, VAR.VAR_VALUE, GRP.LEADER_ID AS PERFORMER_ID, VAR.INSTANCE_ID, PAR.INDEX_VAR 
			                                           FROM IKEP4_WF_PARTICIPANT PAR, IKEP4_WF_INSTANCE_VAR VAR, IKEP4_EV_GROUP GRP
			                                          WHERE PAR.RULE_CONSTRAINT = 'MANAGER_OF'
			                                            AND PAR.PROCESS_ID = VAR.PROCESS_ID
			                                            AND PAR.PROCESS_VER = VAR.PROCESS_VER
			                                            AND PAR.PERFORMER_ID = VAR.VAR_ID
			                                            AND GRP.GROUP_ID = VAR.VAR_VALUE
			                                            AND GRP.LEADER_ID = #userId#
			                                        ) VAR_VALUE 
			                           )  ASGN
			                     WHERE  TODO.PROCESS_ID = PROC.PROCESS_ID 
			                       AND  TODO.PROCESS_VER = PROC.PROCESS_VER
			                       AND  TODO.PROCESS_ID = ASGN.PROCESS_ID
			                       AND  TODO.PROCESS_VER = ASGN.PROCESS_VER
			                       AND  TODO.ACTIVITY_ID = ASGN.ACTIVITY_ID
			                       AND TODO.INSTANCE_ID = ASGN.INSTANCE_ID
			                       AND  TODO.INSTANCE_ID = INS.INSTANCE_ID
			                       AND  PROC.PARTITION_ID = PARTI.PARTITION_ID(+)
			                       AND  (TODO.PERFORMER_ID = #userId# OR TODO.PERFORMER_ID is NULL)
			                       AND  PROC.PROCESS_STATE = 'ACTIVE'
			                    ) LST,
			                    IKEP4_EV_USER USR
			              WHERE LST.INSTANCEAUTHOR = USR.USER_ID
			                AND (SYSDATE <= LST.openDate OR LST.openDate IS NULL)
			              )
			        WHERE DELE_FLAG = '0'
		      				           
	    	)
		]]>		   

		   <include refid="whereList"/>
		   
	</select>
	
	<select id="runningList" parameterClass="workplaceItemSearchCondition" resultClass="WorkItemBean">
  		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.runningList */
  		<![CDATA[ 
	    SELECT	*
		   FROM ( 
		     SELECT ROWNUM AS RNUM, A.* FROM ( 
		        /* START========================================= */
				SELECT  '' AS insLogId, INS.INSTANCE_ID AS instanceId, PROC.PARTITION_ID AS partitionId, PARTI.PARTITION_NAME AS partitionName
						, PROC.PROCESS_ID AS processId,	PROC.PROCESS_VER AS processVer, PROC.PROCESS_NAME AS processName, ACT.ACTIVITY_ID AS activityId, ACT.ACTIVITY_NAME AS activityName, INS.TITLE AS title
						, '' AS performerId, '' AS performerName, INS.STATE AS state
						, '' AS createDate, '' AS assignDate
						, INSLOG.SELECT_DATE AS selectDate
						, INSLOG.DUE_DATE AS dueDate
						, '' AS varSchema
						, INS.CREATE_DATE AS procStartDate
						, INS.FINISHED_DATE AS procEndDate
						, INS.PERFORMER_ID AS instanceAuthor
						, USR.USER_NAME as userName
						, USR.USER_ENGLISH_NAME as userEnglishName
						, DECODE(INS.STATE, 'RUNNING', '진행중', 'COMPLETE','완료') AS stateName 
				  FROM  IKEP4_WF_PARTITION PARTI,
				  		IKEP4_WF_ACTIVITY ACT,
	                    IKEP4_WF_PROCESS PROC,
	                    IKEP4_WF_PARTICIPANT PAR,
	                    IKEP4_WF_INSTANCE INS,
	                    IKEP4_WF_INSTANCE_LOG INSLOG,
	                    IKEP4_EV_USER USR
				 WHERE  PROC.PARTITION_ID = PARTI.PARTITION_ID (+)
	               AND  PROC.PROCESS_ID = INS.PROCESS_ID
                   AND     PROC.PROCESS_VER = INS.PROCESS_VER
                   AND	ACT.ACTIVITY_ID = INSLOG.ACTIVITY_ID
                   AND  INS.INSTANCE_ID = INSLOG.INSTANCE_ID
                   AND  PAR.PROCESS_ID = INSLOG.PROCESS_ID
                   AND    PAR.PROCESS_VER = INSLOG.PROCESS_VER
                   AND  PAR.ACTIVITY_ID = INSLOG.ACTIVITY_ID
                   AND  ((INSLOG.STATE = 'ASSIGN' AND PAR.PERFORMER_ID = #userId#) OR (INSLOG.STATE = 'COMPLETE' AND PAR.PERFORMER_ID = #userId#))               
                   AND  INS.STATE = 'RUNNING'
                   AND     PAR.PARTICIPANT_SEQ > 0
                   AND    INSLOG.LOG_ID > 0
                   AND  INS.PERFORMER_ID = USR.USER_ID(+)
                   AND  PROC.PROCESS_STATE = 'ACTIVE'
                   AND	(SYSDATE <= INS.OPEN_DATE OR INS.OPEN_DATE IS NULL)
	   	]]>
	               <include refid="whereList"/>
	               
				 ORDER BY INS.CREATE_DATE DESC, INS.INSTANCE_ID ASC  
				 /* ===========================================END  */ 
		<![CDATA[ 
		    ) A WHERE ROWNUM <=  #endRowIndex# /* 종료  */
		) WHERE RNUM >  #startRowIndex# /* 시작 */
		]]>
	</select>  
   
   	<select id="countrunningList" parameterClass="workplaceItemSearchCondition" resultClass="int">  
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.countrunningList */
		<![CDATA[
		SELECT  COUNT(*)                            
		  FROM  IKEP4_WF_PARTITION PARTI,
		  			IKEP4_WF_ACTIVITY ACT,
                   IKEP4_WF_PROCESS PROC,
                   IKEP4_WF_PARTICIPANT PAR,
                   IKEP4_WF_INSTANCE INS,
                   IKEP4_WF_INSTANCE_LOG INSLOG
		 WHERE  PROC.PARTITION_ID = PARTI.PARTITION_ID (+)
              AND  PROC.PROCESS_ID = INS.PROCESS_ID
              AND	PROC.PROCESS_VER = INS.PROCESS_VER
              AND	ACT.ACTIVITY_ID = INSLOG.ACTIVITY_ID
              AND  INS.INSTANCE_ID = INSLOG.INSTANCE_ID
              AND  PAR.PROCESS_ID = INSLOG.PROCESS_ID
              AND	PAR.PROCESS_VER = INSLOG.PROCESS_VER
              AND  PAR.ACTIVITY_ID = INSLOG.ACTIVITY_ID
              AND  ((INSLOG.STATE = 'ASSIGN' AND PAR.PERFORMER_ID = #userId#) OR (INSLOG.STATE = 'COMPLETE' AND PAR.PERFORMER_ID = #userId#))               
              AND  INS.STATE = 'RUNNING'
              AND 	PAR.PARTICIPANT_SEQ > 0
              AND	INSLOG.LOG_ID > 0
              AND  PROC.PROCESS_STATE = 'ACTIVE'
              AND	(SYSDATE <= INS.OPEN_DATE OR INS.OPEN_DATE IS NULL)
		]]>
		
		<include refid="whereList"/>
		
	</select> 
	
	<select id="errorList" parameterClass="workplaceItemSearchCondition" resultClass="WorkItemBean">
  		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.errorList */
	    SELECT	*
		   FROM ( 
		     SELECT ROWNUM AS RNUM, A.* FROM ( 
		        /* START========================================= */
				SELECT  '' AS insLogId, INS.INSTANCE_ID AS instanceId, PROC.PARTITION_ID AS partitionId, PARTI.PARTITION_NAME AS partitionName
						, PROC.PROCESS_ID AS processId,	PROC.PROCESS_VER AS processVer, PROC.PROCESS_NAME AS processName, '' AS activityId, '' AS activityName, INS.TITLE AS title
						, '' AS performerId, '' AS performerName, INS.STATE AS state
						, '' AS createDate, '' AS assignDate
						, '' AS selectDate
						, '' AS dueDate
						, '' AS varSchema
						, INS.CREATE_DATE AS procStartDate
						, INS.FINISHED_DATE AS procEndDate
						, INS.PERFORMER_ID AS instanceAuthor
						, USR.USER_NAME as userName
						, USR.USER_ENGLISH_NAME as userEnglishName
						, DECODE(INS.STATE, 'RUNNING', '진행중', 'COMPLETE','완료') AS stateName 
						, INS.RESULT_MSG AS resultMsg
				  FROM  IKEP4_WF_PARTITION PARTI,
	                    IKEP4_WF_PROCESS PROC,
	                    IKEP4_WF_INSTANCE INS,
	                    (
                            SELECT 	DISTINCT INSLOG.INSTANCE_ID
                   			FROM	IKEP4_WF_INSTANCE_LOG INSLOG
                   			WHERE	( INSLOG.STATE = 'ASSIGN' OR INSLOG.STATE = 'COMPLETE')
                           			AND EXISTS (SELECT *
		                           				FROM IKEP4_WF_PARTICIPANT PAR 
		                                       	WHERE PAR.PARTICIPANT_SEQ > 0 
		                                       		AND INSLOG.PROCESS_ID = PAR.PROCESS_ID 
		                                           	AND INSLOG.ACTIVITY_ID = PAR.ACTIVITY_ID)
                        ) A,
	                    IKEP4_EV_USER USR
				 WHERE 	PROC.PARTITION_ID = PARTI.PARTITION_ID (+)
	               AND 	PROC.PROCESS_ID = INS.PROCESS_ID
	               AND	PROC.PROCESS_VER = INS.PROCESS_VER
	               AND 	INS.INSTANCE_ID = A.INSTANCE_ID
	               AND 	INS.STATE = 'RUNNING'
                   AND 	INS.RESULT = 'ERROR'
	               AND  INS.PERFORMER_ID = USR.USER_ID(+)
	               
	               <include refid="whereList"/>
	               
				 ORDER BY INS.CREATE_DATE DESC, INS.INSTANCE_ID ASC  
				 /* ===========================================END  */ 
		<![CDATA[ 
		    ) A WHERE ROWNUM <=  #endRowIndex# /* 종료  */
		) WHERE RNUM >  #startRowIndex# /* 시작 */
		]]>
	</select>  
   
   	<select id="counterrorList" parameterClass="workplaceItemSearchCondition" resultClass="int">  
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.counterrorList */
		<![CDATA[
		SELECT  COUNT(*)                            
		  FROM  IKEP4_WF_PARTITION PARTI,
                IKEP4_WF_PROCESS PROC,
                IKEP4_WF_INSTANCE INS,
                (
		           SELECT 	DISTINCT INSLOG.INSTANCE_ID
                   FROM		IKEP4_WF_INSTANCE_LOG INSLOG
                   WHERE	( INSLOG.STATE = 'ASSIGN' OR INSLOG.STATE = 'COMPLETE')
                           	AND EXISTS (SELECT *
                           				FROM IKEP4_WF_PARTICIPANT PAR 
                                       	WHERE PAR.PARTICIPANT_SEQ > 0 
                                       		AND INSLOG.PROCESS_ID = PAR.PROCESS_ID 
                                           	AND INSLOG.ACTIVITY_ID = PAR.ACTIVITY_ID)
                ) A,
                IKEP4_EV_USER USR
		WHERE 	PROC.PARTITION_ID = PARTI.PARTITION_ID (+)
           AND 	PROC.PROCESS_ID = INS.PROCESS_ID
           AND	PROC.PROCESS_VER = INS.PROCESS_VER
           AND 	INS.INSTANCE_ID = A.INSTANCE_ID
           AND 	INS.STATE = 'RUNNING'
           AND 	INS.RESULT = 'ERROR'
           AND  INS.PERFORMER_ID = USR.USER_ID(+)
		]]>
		
		<include refid="whereList"/>
		
	</select> 
  
	<select id="completeList" parameterClass="workplaceItemSearchCondition" resultClass="WorkItemBean">
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.completeList */
		<![CDATA[ 
	    SELECT	*
		   FROM ( 
		     SELECT ROWNUM AS RNUM, A.* FROM ( 
		         /* START========================================= */
				SELECT  '' AS insLogId, INS.INSTANCE_ID AS instanceId, PROC.PARTITION_ID AS partitionId, PARTI.PARTITION_NAME AS partitionName
						, PROC.PROCESS_ID AS processId, PROC.PROCESS_VER AS processVer, PROC.PROCESS_NAME AS processName, ACT.ACTIVITY_ID AS activityId, ACT.ACTIVITY_NAME AS activityName
						, INS.TITLE AS title, '' AS performerId, '' AS performerName, INS.STATE AS state, '' AS createDate, '' AS assignDate
						, INSLOG.SELECT_DATE AS selectDate
						, INSLOG.DUE_DATE AS dueDate
						, INS.CREATE_DATE AS procStartDate
						, INS.FINISHED_DATE AS procEndDate
						, '' AS varSchema
						, INS.PERFORMER_ID AS instanceAuthor, USR.USER_NAME as userName
						, DECODE(INS.STATE, 'RUNNING', '진행중', 'COMPLETE','완료') AS stateName
						, INS.APP_KEY01 AS appKey01, INS.APP_KEY02 AS appKey02, INS.APP_KEY03 AS appKey03, INS.APP_KEY04 AS appKey04, INS.APP_KEY05 AS appKey05
						, INS.APP_KEY06 AS appKey06, INS.APP_KEY07 AS appKey07, INS.APP_KEY08 AS appKey08, INS.APP_KEY09 AS appKey09, INS.APP_KEY05 AS appKey10 	
						, IKEP4_FN_AP_CODE_NAME(INS.APP_KEY02) AS formTypeName 					
			     FROM   IKEP4_WF_PARTITION PARTI, 
			            IKEP4_WF_PROCESS PROC, 
			            IKEP4_WF_ACTIVITY ACT, 
			            IKEP4_WF_PARTICIPANT PAR, 
			            IKEP4_WF_INSTANCE INS, 
			            IKEP4_WF_INSTANCE_LOG INSLOG,
   				        IKEP4_EV_USER USR
			    WHERE 	PROC.PARTITION_ID = PARTI.PARTITION_ID (+) 
			      AND 	PROC.PROCESS_ID = INS.PROCESS_ID 
			      AND	PROC.PROCESS_VER = INS.PROCESS_VER
			      AND 	INS.INSTANCE_ID = INSLOG.INSTANCE_ID 
			      AND 	PAR.PROCESS_ID = INSLOG.PROCESS_ID
			      AND	PAR.PROCESS_VER = INSLOG.PROCESS_VER 
			      AND 	PAR.ACTIVITY_ID = INSLOG.ACTIVITY_ID 
			      AND 	ACT.PROCESS_ID = PAR.PROCESS_ID 
			      AND	ACT.PROCESS_VER = PAR.PROCESS_VER
			      AND 	ACT.ACTIVITY_ID = PAR.ACTIVITY_ID
			      AND 	(INSLOG.STATE = 'COMPLETE' AND INSLOG.PERFORMER_ID = #userId#) 
			      AND 	INS.STATE = 'COMPLETE' 
			      AND	INS.INSTANCE_ID > ' '
            	  AND	INSLOG.LOG_ID > 0
            	  AND   INS.PERFORMER_ID = USR.USER_ID(+)
            	  AND   PROC.PROCESS_STATE = 'ACTIVE'
            	  AND	(SYSDATE <= INS.OPEN_DATE OR INS.OPEN_DATE IS NULL)
		]]>
			      <include refid="whereList"/>
			      
					  <isEmpty property="sortColumn" >ORDER BY INS.CREATE_DATE DESC, INS.INSTANCE_ID ASC</isEmpty>
					  <isNotEmpty property="sortColumn" >ORDER BY $sortColumn$ $sortType$</isNotEmpty>
				 /* ===========================================END  */ 
		<![CDATA[ 
		    ) A WHERE ROWNUM <=  #endRowIndex# /* 종료  */
		) WHERE RNUM >  #startRowIndex# /* 시작 */
		]]>
   </select>   
   
   <select id="countcompleteList" parameterClass="workplaceItemSearchCondition" resultClass="int">  
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.countcompleteList */
		<![CDATA[
		SELECT  COUNT(*)
	     FROM   IKEP4_WF_PARTITION PARTI, 
	            IKEP4_WF_PROCESS PROC, 
	            IKEP4_WF_ACTIVITY ACT, 
	            IKEP4_WF_PARTICIPANT PAR, 
	            IKEP4_WF_INSTANCE INS, 
	            IKEP4_WF_INSTANCE_LOG INSLOG 
	    WHERE 	PROC.PARTITION_ID = PARTI.PARTITION_ID (+) 
	      AND 	PROC.PROCESS_ID = INS.PROCESS_ID 
	      AND	PROC.PROCESS_VER = INS.PROCESS_VER
	      AND 	INS.INSTANCE_ID = INSLOG.INSTANCE_ID 
	      AND 	PAR.PROCESS_ID = INSLOG.PROCESS_ID
	      AND	PAR.PROCESS_VER = INSLOG.PROCESS_VER 
	      AND 	PAR.ACTIVITY_ID = INSLOG.ACTIVITY_ID 
	      AND 	ACT.PROCESS_ID = PAR.PROCESS_ID 
	      AND	ACT.PROCESS_VER = PAR.PROCESS_VER
	      AND 	ACT.ACTIVITY_ID = PAR.ACTIVITY_ID
	      AND 	(INSLOG.STATE = 'COMPLETE' AND INSLOG.PERFORMER_ID = #userId#) 
	      AND 	INS.STATE = 'COMPLETE' 
	      AND	INS.INSTANCE_ID > ' '
          AND	INSLOG.LOG_ID > 0
          AND  	PROC.PROCESS_STATE = 'ACTIVE'
          AND	(SYSDATE <= INS.OPEN_DATE OR INS.OPEN_DATE IS NULL)
		]]>
		
		<include refid="whereList"/>
		
	</select>

	<select id="myRequestList" parameterClass="workplaceItemSearchCondition" resultClass="WorkItemBean">
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.myRequestList */
		<![CDATA[  
		SELECT *
		FROM (
			SELECT ROWNUM AS RNUM, A.* FROM ( 
		    /* START========================================= */
				SELECT  PARTI.PARTITION_ID   AS partitionId
                       ,PARTI.PARTITION_NAME AS partitionName
                       ,PROC.PROCESS_ID    AS processId
                       ,PROC.PROCESS_VER    AS processVer
                       ,PROC.PROCESS_NAME  AS processName
                       ,INS.INSTANCE_ID    AS instanceId
                       ,INS.TITLE          AS title
                       ,INS.STATE          AS state
                       ,DECODE(INS.STATE, 'RUNNING', '진행중', 'COMPLETE','완료') AS stateName
                       ,USR.USER_ID        AS userId
                     ,USR.USER_NAME      AS userName
                     ,JOBTI.JOB_TITLE_NAME AS jobTitleName
                     ,USR.TEAM_NAME         AS orgName
                     ,INS.CREATE_DATE    AS createDate 
                             ,INS.APP_KEY01 AS appKey01, INS.APP_KEY02 AS appKey02, INS.APP_KEY03 AS appKey03, INS.APP_KEY04 AS appKey04, INS.APP_KEY05 AS appKey05
                             ,INS.APP_KEY06 AS appKey06, INS.APP_KEY07 AS appKey07, INS.APP_KEY08 AS appKey08, INS.APP_KEY09 AS appKey09, INS.APP_KEY05 AS appKey10 
                             ,IKEP4_FN_AP_CODE_NAME(INS.APP_KEY02) AS formTypeName 
                  FROM  IKEP4_WF_PARTITION PARTI,
                        IKEP4_WF_PROCESS   PROC,
                        IKEP4_WF_INSTANCE  INS,
                        IKEP4_EV_USER      USR, 
                        IKEP4_EV_JOB_TITLE JOBTI
                 WHERE  PARTI.PARTITION_ID = PROC.PARTITION_ID
                   AND  INS.PERFORMER_ID   = USR.USER_ID
                   AND  PROC.PROCESS_ID    = INS.PROCESS_ID
                   AND    PROC.PROCESS_VER    = INS.PROCESS_VER
                   AND    USR.JOB_TITLE_CODE = JOBTI.JOB_TITLE_CODE
                   AND  INS.PERFORMER_ID   = #userId#
                   AND  PROC.PROCESS_STATE = 'ACTIVE'
                   AND    (SYSDATE <= INS.OPEN_DATE OR INS.OPEN_DATE IS NULL)
		]]>
			   <include refid="whereList"/>
				    
			   <isEmpty property="sortColumn" >ORDER BY INS.CREATE_DATE DESC</isEmpty>
			   <isNotEmpty property="sortColumn" >ORDER BY $sortColumn$ $sortType$</isNotEmpty>
				 /* ===========================================END  */ 
		 <![CDATA[  
			) A WHERE ROWNUM <=  #endRowIndex# /* 종료  */
		) WHERE RNUM >  #startRowIndex# /* 시작 */
		]]>
	</select>  
	
	<select id="countmyRequestList" parameterClass="workplaceItemSearchCondition" resultClass="int">  
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.countmyRequestList */
		<![CDATA[
			SELECT COUNT(*)
			  FROM  IKEP4_WF_PARTITION PARTI,
			        IKEP4_WF_PROCESS   PROC,
			        IKEP4_WF_INSTANCE  INS,
			        IKEP4_EV_USER      USR
			 WHERE  PARTI.PARTITION_ID = PROC.PARTITION_ID
			   AND  INS.PERFORMER_ID   = USR.USER_ID
			   AND  PROC.PROCESS_ID    = INS.PROCESS_ID
			   AND	PROC.PROCESS_VER 	= INS.PROCESS_VER
			   AND  INS.PERFORMER_ID   = #userId#
			   AND  PROC.PROCESS_STATE = 'ACTIVE'
			   AND	(SYSDATE <= INS.OPEN_DATE OR INS.OPEN_DATE IS NULL)
		]]>		   
		
		   <include refid="whereList"/>
		   
	</select>
	
	<select id="readProcInfo" parameterClass="ProcessBean" resultClass="ProcessBean">
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.readProcInfo */
		<![CDATA[  
			SELECT  PARTI.PARTITION_ID AS partitionId, PARTI.PARTITION_NAME AS partitionName, PROC.PROCESS_ID AS processId
					, PROC.PROCESS_NAME AS processName, ACT2.ACTIVITY_ID AS activityId, ACT2.ACTIVITY_NAME AS activityName
					, (SELECT USR.USER_NAME FROM IKEP4_EV_USER USR WHERE PROC.AUTHOR = USR.USER_ID ) AS authorName
					, PROC.CREATE_DATE AS createDate, PROC.PROCESS_TYPE AS processType
					, PROC.PROCESS_VER AS processVer
			  FROM  IKEP4_WF_PARTITION PARTI,
			  		IKEP4_WF_PROCESS PROC,
			        IKEP4_WF_ACTIVITY ACT,
			        IKEP4_WF_ACTIVITY ACT2,
			        IKEP4_WF_TRANSITION TRANS
			 WHERE  ACT.SUB_TYPE = 'StartEvent'
			   AND  ACT.PROCESS_ID = TRANS.PROCESS_ID
			   AND  ACT.PROCESS_VER = TRANS.PROCESS_VER
			   AND  ACT.ACTIVITY_ID = TRANS.TRANSITION_FROM
			   AND  ACT2.PROCESS_ID = TRANS.PROCESS_ID
			   AND  ACT2.PROCESS_VER = TRANS.PROCESS_VER
			   AND  ACT2.ACTIVITY_ID = TRANS.TRANSITION_TO
			   AND  PROC.PROCESS_ID = ACT.PROCESS_ID
			   AND	PROC.PROCESS_VER = ACT.PROCESS_VER
			   AND  PROC.PARTITION_ID = PARTI.PARTITION_ID
			   AND	PROC.PROCESS_STATE = 'ACTIVE'
			   AND 	PROC.PROCESS_ID = #processId#
	           AND 	PROC.PROCESS_VER > ' '
	           AND 	ACT.ACTIVITY_ID > ' '
	           AND 	ACT2.ACTIVITY_ID > ' '
		]]>
   	</select>  
   	
   	<resultMap id="selectPartitionResultMap" class="java.util.HashMap">
	    <result property="partitionId" column="PARTITION_ID" jdbcType="VARCHAR" />
	    <result property="partitionName" column="PARTITION_NAME" jdbcType="VARCHAR" />
	</resultMap>
   
   	<select id="selectPartition" resultMap="selectPartitionResultMap">
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.selectPartition */
		<![CDATA[  
			SELECT /*+INDEX_ASC(PARTI XPKBPM_PARTITION)*/PARTITION_ID, PARTITION_NAME
			FROM IKEP4_WF_PARTITION PARTI
			WHERE PARTITION_ID > ' '
		]]>
	</select>
	
	<resultMap id="selectProcessResultMap" class="java.util.HashMap">
	    <result property="processId" column="PROCESS_ID" jdbcType="VARCHAR" />
	    <result property="processName" column="PROCESS_NAME" jdbcType="VARCHAR" />
	    <result property="processVer" column="PROCESS_VER" jdbcType="VARCHAR" />
	</resultMap>
   
   	<select id="selectProcess" resultMap="selectProcessResultMap">
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.selectProcess */
		<![CDATA[  
			SELECT /*+INDEX(PROC XPKBPM_PROCESS)*/ 
			       PROCESS_ID, 
			       PROCESS_NAME,
			       PROCESS_VER
			  FROM IKEP4_WF_PROCESS PROC 
			ORDER BY PROCESS_NAME, PROCESS_VER ASC
		]]>
	</select>
	
	<resultMap id="selectVersionResultMap" class="java.util.HashMap">
	    <result property="processVer" column="PROCESS_VER" jdbcType="VARCHAR" />
	</resultMap>
   
   	<select id="selectProcessVer" resultMap="selectVersionResultMap">
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.selectProcess */
		<![CDATA[  
			SELECT process_ver 
			  FROM IKEP4_WF_PROCESS 
			 WHERE process_id = #processId#
			ORDER BY process_ver ASC
		]]>
	</select>
	
	<select id="countProcStatisticsRunning" parameterClass="workplaceItemSearchCondition" resultClass="int">  
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.countProcStatisticsRunning */
		<![CDATA[
		SELECT  COUNT(*)
		  FROM  IKEP4_WF_PARTITION PARTI,
                IKEP4_WF_PROCESS PROC,
                IKEP4_WF_INSTANCE INS,
                (
                	SELECT 	DISTINCT INSLOG.INSTANCE_ID
                    FROM	IKEP4_WF_INSTANCE_LOG INSLOG
                    WHERE	( INSLOG.STATE = 'ASSIGN' OR INSLOG.STATE = 'COMPLETE')
                            AND EXISTS (SELECT *
                            			FROM IKEP4_WF_PARTICIPANT PAR 
                                        WHERE PAR.PARTICIPANT_SEQ > 0 
                                        	AND INSLOG.PROCESS_ID = PAR.PROCESS_ID 
                                            AND INSLOG.ACTIVITY_ID = PAR.ACTIVITY_ID)
                ) A
		 WHERE  PROC.PARTITION_ID = PARTI.PARTITION_ID (+)
	            AND PROC.PROCESS_ID = INS.PROCESS_ID
	            AND PROC.PROCESS_VER = INS.PROCESS_VER
	            AND INS.INSTANCE_ID = A.INSTANCE_ID
	            AND INS.STATE = 'RUNNING'
	    ]]>	
            <isNotNull property="processId"><isNotEmpty property="processId" prepend="AND">
				PROC.PROCESS_ID = #processId#
	        </isNotEmpty></isNotNull>
	        <isNotNull property="processVer"><isNotEmpty property="processVer" prepend="AND">
				PROC.PROCESS_VER = #processVer#
	        </isNotEmpty></isNotNull>
	        <isNull property="processId"><isEmpty property="processId" prepend="AND">
				PROC.PROCESS_ID||PROC.PROCESS_VER = (	SELECT PROCESS_ID||PROCESS_VER 
                                                          FROM 
                                                               (SELECT 
                                                                      /*+INDEX(PROC XPKBPM_PROCESS)*/ 
                                                                      ROW_NUMBER() OVER (ORDER BY PROCESS_NAME, PROCESS_VER ASC) AS RNUM , 
                                                                      PROCESS_ID , 
                                                                      PROCESS_VER
                                                                 FROM IKEP4_WF_PROCESS PROC 
                                                               ) 
                                                         WHERE RNUM=1)
	        </isEmpty></isNull>
			<isNotNull property="startPeriod"><isNotEmpty property="startPeriod" prepend="AND">
				INS.CREATE_DATE 	>= TO_DATE(REPLACE(#startPeriod#,'.','')||'000000', 'YYYYMMDDHH24MISS')
	        </isNotEmpty></isNotNull>
			<isNotNull property="endPeriod"><isNotEmpty property="endPeriod" prepend="AND">
				TO_DATE(REPLACE(#endPeriod#,'.','')||'235959', 'YYYYMMDDHH24MISS') >= INS.CREATE_DATE
	        </isNotEmpty></isNotNull>
	</select>
	
	<select id="countProcStatisticsComplete" parameterClass="workplaceItemSearchCondition" resultClass="int">  
		/* [WorkplaceList_SqlMap.xml] workflow.workplace.dao.WorkplaceList.countProcStatisticsComplete */
		<![CDATA[
		SELECT	COUNT(*)
	     FROM	IKEP4_WF_PARTITION PARTI, 
	            IKEP4_WF_PROCESS PROC, 
	            IKEP4_WF_INSTANCE INS, 
	            (
                	SELECT 	DISTINCT INSLOG.INSTANCE_ID
                    FROM	IKEP4_WF_INSTANCE_LOG INSLOG
                    WHERE	INSLOG.STATE = 'COMPLETE' 
                            AND EXISTS (SELECT 	*
                            			FROM 	IKEP4_WF_PARTICIPANT PAR 
                                        		, IKEP4_WF_ACTIVITY ACT
                                        WHERE 	PAR.PARTICIPANT_SEQ > 0 
                                        		AND ACT.PROCESS_ID = PAR.PROCESS_ID 
                            					AND ACT.ACTIVITY_ID = PAR.ACTIVITY_ID
                                        		AND INSLOG.PROCESS_ID = PAR.PROCESS_ID 
                                            	AND INSLOG.ACTIVITY_ID = PAR.ACTIVITY_ID)
                ) A
	    WHERE 	PROC.PARTITION_ID = PARTI.PARTITION_ID (+) 
		      	AND PROC.PROCESS_ID = INS.PROCESS_ID 
		      	AND PROC.PROCESS_VER = INS.PROCESS_VER
		      	AND INS.INSTANCE_ID = A.INSTANCE_ID 
		      	AND INS.STATE = 'COMPLETE' 
		      	AND	INS.INSTANCE_ID > ' '
		]]>	
			<isNotNull property="processId"><isNotEmpty property="processId" prepend="AND">
				PROC.PROCESS_ID = #processId#
	        </isNotEmpty></isNotNull>
	        <isNotNull property="processVer"><isNotEmpty property="processVer" prepend="AND">
				PROC.PROCESS_VER = #processVer#
	        </isNotEmpty></isNotNull>
	        <isNull property="processId"><isEmpty property="processId" prepend="AND">
				PROC.PROCESS_ID||PROC.PROCESS_VER = (	SELECT PROCESS_ID||PROCESS_VER 
                                                          FROM 
                                                               (SELECT 
                                                                      /*+INDEX(PROC XPKBPM_PROCESS)*/ 
                                                                      ROW_NUMBER() OVER (ORDER BY PROCESS_NAME, PROCESS_VER ASC) AS RNUM , 
                                                                      PROCESS_ID , 
                                                                      PROCESS_VER
                                                                 FROM IKEP4_WF_PROCESS PROC 
                                                               ) 
                                                         WHERE RNUM=1)
	        </isEmpty></isNull>
			<isNotNull property="startPeriod"><isNotEmpty property="startPeriod" prepend="AND">
				INS.FINISHED_DATE 	>= TO_DATE(REPLACE(#startPeriod#,'.','')||'000000', 'YYYYMMDDHH24MISS')
	        </isNotEmpty></isNotNull>
			<isNotNull property="endPeriod"><isNotEmpty property="endPeriod" prepend="AND">
				TO_DATE(REPLACE(#endPeriod#,'.','')||'235959', 'YYYYMMDDHH24MISS') >= INS.FINISHED_DATE
	        </isNotEmpty></isNotNull>
	</select>

</sqlMap>